import logging

from uuid import UUID
from autogenerated.ppms_ import DataTableError
from ppms import ppms

from custom.module_subclasses.module_reader.module_reader_service_handler_base import ModuleReaderServiceHandler


__all__ = ['CustomModuleReaderServiceHandler']

class CustomModuleReaderServiceHandler(ModuleReaderServiceHandler):
    def handle_post(self, web_entity_uuid, dt_number, variables, query_parameters, json_parameters):
        ppms.logger.info(f'handle_post: dt_number: {dt_number}')
        ppms.logger.info(f'handle_post: variables: {variables}')
        ppms.logger.info(f'handle_post: query_parameters: {query_parameters}')
        ppms.logger.info(f'handle_post: parameters: {json_parameters}')

        res = {}

        record = ppms.create_record(dt_number, json_parameters)
        if record:
            record.save()
            res['status'] = 200
        else:
            res['error'] = 'POST:record could not be created'
            res['status'] = 500

        return res

    def handle_put(self, web_entity_uuid, dt_number, variables, query_parameters, di_ids, di_pids, json_parameters):
        ppms.logger.info(f'handle_put: dt_number: {dt_number}')
        ppms.logger.info(f'handle_put: variables: {variables}')
        ppms.logger.info(f'handle_put: query_parameters: {query_parameters}')
        ppms.logger.info(f'handle_get: di_pids: {di_pids}')
        ppms.logger.info(f'handle_put: parameters: {json_parameters}')

        res = {}

        record = ppms.search_record(dt_number, [variables['id']], di_pids)
        if record:
            for di_pid in di_pids:
                if di_pid not in json_parameters.keys():
                    """of course we checked, if key is not mandatory on the jython-side"""
                    continue
                record.get_di(di_pid).set_value(json_parameters[di_pid])
                # todo: use json-key instead of python-di for the response
                res.update({di_pid: record.get_di(di_pid).get_value()})
            record.save()
            res['status'] = 200
        else:
            res['error'] = 'PUT:record with id {id} not found'.format(id=variables['id'])
            res['status'] = 404

        return res

    def handle_get(self, web_entity_uuid, dt_number, variables, query_parameters, di_ids, di_pids):
        ppms.logger.info(f'handle_get: dt_number: {dt_number}')
        ppms.logger.info(f'handle_get: variables: {variables}')
        ppms.logger.info(f'handle_get: di_ids: {di_ids}')

        res = {}
        record = ppms.search_record(dt_number, [variables['id']], di_pids)
        if record:
            for di_pid in di_pids:
                # todo: use json-key instead of python-di for the response
                attribute_name = self._get_attribute_name_from_di_python_id(web_entity_uuid=web_entity_uuid, dt_number=dt_number, di_python_id=di_pid)
                res.update({attribute_name: record.get_di(di_pid).get_value()})
            res['status'] = 200
        else:
            res['error'] = 'GET:record with id {id} not found'.format(id=variables['id'])
            res['status'] = 404

        return res

